//#############################################################################
//Working code
//#############################################################################

//
// Included Files
//
#include "driverlib.h"
#include "device.h"
#include "board.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "dww_parameter.h"

//
// Defines
//
#define NUM_CHANNELS            18
#define SAMPLE_COUNT_THRESHOLD  100


int m;
//
// Globals
//
uint32_t myADC0Results[NUM_CHANNELS];   // Buffer for raw ADC results

// Removed unused index and bufferFull variables

// Global accumulator for each channel’s sum of squares
unsigned long dwSumPhaseVolt[NUM_CHANNELS] = {0};

// Sample counter for RMS computation
unsigned int sampleCount = 0;

// Global variable for calibration factor (adjust as needed)
float calib = 5265;

//
// Global Declaration for Demand and other parameters (unchanged)
//
DWW_CHANNEL_PARAMETER Branch;
unsigned int struct_size;
unsigned long dwwMathBuff;
unsigned int max_curr;
static int i;
unsigned int demand_chk_1sec, demand_chk_1hr, demand_chk_24hr;
unsigned int wDemandSumCntr[4];
unsigned long dw_CurrDemandSum[NUM_CHANNELS];
dww_structflag *sFlag;

// Other global variables remain as originally defined
unsigned int adcAResult[NUM_CHANNELS];
unsigned int dww_RMS_Current;
unsigned int count = 0;

int root;
int pinstate;

volatile bool syncSignalReceived = false;  // Flag to indicate sync signal

//
// Function Prototypes
//
void initEPWM(void);
void dww_Loadper_Calc(void);
void dww_max_min_Calc(void);
void dww_timer(void);
void dww_demand_Calc(void);

uint16_t pinState;


#define DEVICE_GPIO_PIN_LED1        29U             // GPIO number for LED1
#define DEVICE_GPIO_CFG_LED1        GPIO_29_GPIO29  // "pinConfig" for LED1


int a=0;

__interrupt void gpioISR(void)
{
    // Set the flag indicating we've received a sync signal
    syncSignalReceived = true;

    // Acknowledge the interrupt
    Interrupt_clearACKGroup(INTERRUPT_ACK_GROUP1);
}


// Configure GPIO 28 as input with pullup
void configureGPIO28(void)
{
    GPIO_setPadConfig(28, GPIO_PIN_TYPE_PULLUP | GPIO_PIN_TYPE_INVERT); // Enable pullup on GPIO40
    GPIO_setPinConfig(GPIO_28_GPIO28);               // GPIO40 = GPIO40
    GPIO_setDirectionMode(28, GPIO_DIR_MODE_IN);     // GPIO40 = input
    GPIO_setQualificationMode(28, GPIO_QUAL_SYNC);   // Synch to SYSCLKOUT


    GPIO_setInterruptType(GPIO_INT_XINT1, GPIO_INT_TYPE_RISING_EDGE); // Interrupt on rising edge (when signal goes high)
       GPIO_setInterruptPin(28, GPIO_INT_XINT1);

       // Register the interrupt handler and enable XINT1 interrupt
       Interrupt_register(INT_XINT1, &gpioISR);
       Interrupt_enable(INT_XINT1);
       GPIO_enableInterrupt(GPIO_INT_XINT1);
}

// Read GPIO 28 state (1 if 3.3V, 0 if not)
uint32_t readGPIO28(void)
{
    return GPIO_readPin(28);
}






//
// Function to configure ePWM1 to generate the SOC.
//

void initEPWM(void)
{
    //
    // Disable SOCA before configuration
    //
    EPWM_disableADCTrigger(EPWM1_BASE, EPWM_SOC_A);

    //
    // Configure the SOC to occur on the first up-count event
    //
    EPWM_setADCTriggerSource(EPWM1_BASE, EPWM_SOC_A, EPWM_SOC_TBCTR_U_CMPA);
    EPWM_setADCTriggerEventPrescale(EPWM1_BASE, EPWM_SOC_A, 1);

    //
    // Set the compare A value and period.
    // For example, with these values and a 100MHz ePWM clock, you would get a 50kHz sampling rate.
    //
    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, 1000);
    EPWM_setTimeBasePeriod(EPWM1_BASE, 1999);

    //
    // Set the local ePWM module clock divider to /1 (changed from /4)
    //
    EPWM_setClockPrescaler(EPWM1_BASE, EPWM_CLOCK_DIVIDER_1, EPWM_HSCLOCK_DIVIDER_1);

    //
    // Set counter mode to up-count
    //
    EPWM_setTimeBaseCounterMode(EPWM1_BASE, EPWM_COUNTER_MODE_UP_DOWN);

    //
    // Enable the ADC SOC A trigger - THIS IS CRITICAL!
    //
    EPWM_enableADCTrigger(EPWM1_BASE, EPWM_SOC_A);

    //
    // Start the ePWM counter - THIS WAS MISSING!
    //
    EPWM_setTimeBaseCounterMode(EPWM1_BASE, EPWM_COUNTER_MODE_UP_DOWN);
}

//
// adcA1ISR - ADC A Interrupt 1 ISR
//




__interrupt void adcA1ISR(void)
{ m=700;
int i;
    float avgSquare, rms;
    unsigned long square;

    //
    // Read ADC conversion results for NUM_CHANNELS.
    // Offsets are applied as in your original code.
    //
    myADC0Results[0]  = (signed int)(ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER0) - 2048);
    myADC0Results[1]  = (signed int)ADC_readResult(ADCERESULT_BASE, ADC_SOC_NUMBER2) - 2048;
    myADC0Results[2]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER1) - 2048;
    myADC0Results[3]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER2) - 2048;
    myADC0Results[4]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER3) - 2048;
    myADC0Results[5]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER4) - 2048;
    myADC0Results[6]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER5) - 2048;
    myADC0Results[7]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER6) - 2048;
    myADC0Results[8]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER7) - 2048;
    myADC0Results[9]  = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER8) - 2048;
    myADC0Results[10] = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER9) - 2048;
    myADC0Results[11] = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER10) - 2048;
    myADC0Results[12] = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER11) - 2048;
    myADC0Results[13] = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER12) - 2048;
    myADC0Results[14] = (signed int)ADC_readResult(ADCERESULT_BASE, ADC_SOC_NUMBER3) - 2048;
    myADC0Results[15] = (signed int)ADC_readResult(ADCERESULT_BASE, ADC_SOC_NUMBER0) - 2048;
    myADC0Results[16] = (signed int)ADC_readResult(ADCERESULT_BASE, ADC_SOC_NUMBER1) - 2048;
    myADC0Results[17] = (signed int)ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER13) - 2048;

    //
    // For each channel, square the result and accumulate it.
    //
    for(i = 0; i < NUM_CHANNELS; i++)
    {
        square = (unsigned long)myADC0Results[i] * (unsigned long)myADC0Results[i];
        dwSumPhaseVolt[i] += square;
    }

    //
    // Increment the sample counter.
    //
    sampleCount++;

    //
    // Once 100 samples have been collected, compute the RMS for each channel.
    //
    if(sampleCount >= SAMPLE_COUNT_THRESHOLD)
    {
        for(i = 0; i < NUM_CHANNELS; i++)
        {
            avgSquare = (float)dwSumPhaseVolt[i] / (float)SAMPLE_COUNT_THRESHOLD;
            rms = sqrtf(avgSquare) * calib/10000;
            Branch.dww_channel[i].RMS = (unsigned int)rms;

            // Reset accumulator for next set of samples
            dwSumPhaseVolt[i] = 0;
        }
        sampleCount = 0;
    }

    //
    // Clear the ADC interrupt flags.
    //
    ADC_clearInterruptStatus(myADC0_BASE, ADC_INT_NUMBER1);
    ADC_clearInterruptStatus(myADC1_BASE, ADC_INT_NUMBER1);

    //
    // Check and clear overflow flags if necessary.
    //
    if(ADC_getInterruptOverflowStatus(myADC0_BASE, ADC_INT_NUMBER1))
    {
        ADC_clearInterruptOverflowStatus(myADC0_BASE, ADC_INT_NUMBER1);
        ADC_clearInterruptStatus(myADC0_BASE, ADC_INT_NUMBER1);
    }

    if(ADC_getInterruptOverflowStatus(myADC1_BASE, ADC_INT_NUMBER1))
    {
        ADC_clearInterruptOverflowStatus(myADC1_BASE, ADC_INT_NUMBER1);
        ADC_clearInterruptStatus(myADC1_BASE, ADC_INT_NUMBER1);
    }

    //
    // Acknowledge the interrupt.
    //
    Interrupt_clearACKGroup(INT_myADC0_1_INTERRUPT_ACK_GROUP);
}

//
// Logic for Load Percentage Calculation (unchanged)
//
void dww_Loadper_Calc(void)
{
    for (i = 0; i < MAX_CT_LENGTH; i++)
    {
        dwwMathBuff = (unsigned long)(Branch.dww_channel[i].RMS * 1000);
        if (max_curr != 0)
        {
            Branch.dww_channel[i].Loadper = dwwMathBuff / max_curr;
        }
    }
}

//
// Logic for Maximum and Minimum Parameter Calculation (with added parentheses for clarity)
//
void dww_max_min_Calc(void)
{
    unsigned int i;
    for (i = 0; i < MAX_CT_LENGTH; i++)
    {
        if (((Branch.dww_channel[i].RMS != 0xFFFF) &&
             ((Branch.dww_channel[i].Maxcurrent < Branch.dww_channel[i].RMS) ||
              (Branch.dww_channel[i].Maxcurrent == 0xFFFF))))
        {
            Branch.dww_channel[i].Maxcurrent = Branch.dww_channel[i].RMS;
        }

        if (((Branch.dww_channel[i].RMS != 0x0000) &&
             ((Branch.dww_channel[i].Mincurrent > Branch.dww_channel[i].RMS) ||
              (Branch.dww_channel[i].Mincurrent == 0x0000))))
        {
            Branch.dww_channel[i].Mincurrent = Branch.dww_channel[i].RMS;
        }

        if (((Branch.dww_channel[i].CTCurrDemand_1hr != 0xFFFF) &&
             ((Branch.dww_channel[i].CTMaxCurrDemand_1hr < Branch.dww_channel[i].CTCurrDemand_1hr) ||
              (Branch.dww_channel[i].CTMaxCurrDemand_1hr == 0xFFFF))))
        {
            Branch.dww_channel[i].CTMaxCurrDemand_1hr = Branch.dww_channel[i].CTCurrDemand_1hr;
        }
    }
}

//
// Timer function (unchanged for now; adjust as per your timing requirements)
//
void dww_timer(void)
{
    if (demand_chk_1sec >= 270) // for 1 sec
    {
        sFlag->demand_chk_1sec = 1;
        demand_chk_1sec = 0;
        demand_chk_1hr++;
    }
    else
    {
        demand_chk_1sec++;
    }

    if(demand_chk_1hr >= 60) // Changed from 3600 to 60 for testing
    {
        sFlag->demand_chk_1hr = 1;
        demand_chk_1hr = 0;
        demand_chk_24hr++;
    }

    if(demand_chk_24hr >= 5) // Changed from 24 to 5 for testing
    {
        sFlag->demand_chk_24hr = 1;
        demand_chk_24hr = 0;
    }
}

//
// Demand Calculation function (unchanged)
//
void dww_demand_Calc(void)
{
    int i;
    if (sFlag->demand_chk_1sec == 1)
    {
        for (i = 0; i < MAX_CT_LENGTH; i++)
        {
            dw_CurrDemandSum[i] += Branch.dww_channel[i].RMS;
        }
        sFlag->demand_chk_1sec = 0;
        wDemandSumCntr[0]++;
    }

    if (sFlag->demand_chk_1hr == 1)
    {
        for (i = 0; i < MAX_CT_LENGTH; i++)
        {
            Branch.dww_channel[i].CTCurrDemand_1hr = (unsigned int)(dw_CurrDemandSum[i] / wDemandSumCntr[0]);
            dw_CurrDemandSum[i] = 0;
        }
        sFlag->demand_chk_1hr = 0;
        wDemandSumCntr[0] = 0;
    }

    if (sFlag->demand_chk_24hr == 1)
    {
        for (i = 0; i < MAX_CT_LENGTH; i++)
        {
            Branch.dww_channel[i].CTMaxCurrDemand_24hr = Branch.dww_channel[i].CTMaxCurrDemand_1hr;
            Branch.dww_channel[i].CTMaxCurrDemand_1hr = 0;
        }
        sFlag->demand_chk_24hr = 0;
    }
}

