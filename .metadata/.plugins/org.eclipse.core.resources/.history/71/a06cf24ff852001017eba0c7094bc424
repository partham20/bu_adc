#include "bu_adc.h"
#include "CPU1_FLASH/syscfg/board.h"
#include <math.h>

#define SAMPLE_COUNT_THRESHOLD  100

// Globals
volatile DWW_CHANNEL_PARAMETER Branch;
 int m = 0;

// Private Globals
  uint32_t myADCResults[NUM_CHANNELS];
  unsigned long dwSumPhaseVolt[NUM_CHANNELS] = {0};
 int sampleCount = 0;
static float calib = 5265.0f;


void adc_init()

{


    Board_init();



       /*
        * Enabling the watchdog after the reset
        */
       //SysCtl_enableWatchdog();

       //initEPWM();




       /*
        * Added for the kw calculation
        */


       EINT;
       ERTM;
       ADC_setVREF(ADCARESULT_BASE, ADC_REFERENCE_INTERNAL, ADC_REFERENCE_3_3V);
       EPWM_enableADCTrigger(EPWM1_BASE, EPWM_SOC_A);
       EPWM_setTimeBaseCounterMode(EPWM1_BASE, EPWM_COUNTER_MODE_UP);
}


void initEPWM(void)
{
    EPWM_disableADCTrigger(EPWM1_BASE, EPWM_SOC_A);
    EPWM_setADCTriggerSource(EPWM1_BASE, EPWM_SOC_A, EPWM_SOC_TBCTR_U_CMPA);
    EPWM_setADCTriggerEventPrescale(EPWM1_BASE, EPWM_SOC_A, 1);
    //EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, 2048);
    //EPWM_setTimeBasePeriod(EPWM1_BASE, 4095);
    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, 1500);
    EPWM_setTimeBasePeriod(EPWM1_BASE, 2999);
    EPWM_setClockPrescaler(EPWM1_BASE, EPWM_CLOCK_DIVIDER_4, EPWM_HSCLOCK_DIVIDER_4);
    EPWM_setTimeBaseCounterMode(EPWM1_BASE, EPWM_COUNTER_MODE_STOP_FREEZE);

    /*
     * Added logic to calculate the frequency
     */
    EPWM_setPeriodLoadMode(EPWM1_BASE,EPWM_PERIOD_DIRECT_LOAD);
    EPWM_setTimeBaseCounter(EPWM1_BASE, 0);

}



__interrupt void adcA1ISR(void)
{
    m++;

    Interrupt_clearACKGroup(INT_myADC0_1_INTERRUPT_ACK_GROUP);
}




void  capture_ADC_values(){

       int i;
       float avgSquare, rms;
       unsigned long square;

       // Read ADC conversion results for all configured SOCs
       myADCResults[0]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC0);
       myADCResults[1]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC1);
       myADCResults[2]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC2);
       myADCResults[3]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC3);
       myADCResults[4]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC4);
       myADCResults[5]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC5);
       myADCResults[6]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC6);
       myADCResults[7]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC7);
       myADCResults[8]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC8);
       myADCResults[9]  = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC9);
       myADCResults[10] = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC10);
       myADCResults[11] = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC11);
       myADCResults[12] = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC12);
       myADCResults[13] = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC13);

       myADCResults[14] = ADC_readResult(myADC1_RESULT_BASE, myADC1_SOC0);
       myADCResults[15] = ADC_readResult(myADC1_RESULT_BASE, myADC1_SOC1);
       myADCResults[16] = ADC_readResult(myADC1_RESULT_BASE, myADC1_SOC2);
       myADCResults[17] = ADC_readResult(myADC1_RESULT_BASE, myADC1_SOC3);

       // Process results
       for(i = 0; i < NUM_CHANNELS; i++)
       {
           // Subtract offset (assuming 12-bit ADC with 2048 offset)
           square = (unsigned long)((int32_t)myADCResults[i] - 2048) * ((int32_t)myADCResults[i] - 2048);
           dwSumPhaseVolt[i] += square;
       }

       sampleCount++;

       if(sampleCount >= SAMPLE_COUNT_THRESHOLD)
       {
           for(i = 0; i < NUM_CHANNELS; i++)
           {
               avgSquare = (float)dwSumPhaseVolt[i] / (float)SAMPLE_COUNT_THRESHOLD;
               rms = sqrtf(avgSquare) * calib / 10000.0f;
               Branch.dww_channel[i].RMS = (unsigned int)rms;

               // Reset accumulator for next set of samples
               dwSumPhaseVolt[i] = 0;
           }
           sampleCount = 0;
       }
}

